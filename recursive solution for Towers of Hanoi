// toh.cpp review finished
#include <iostream>
#include <vector>
#include <cstdlib>
#include <cmath>

using namespace std;

int main() {
  vector<int> t[3];//set size 3,  0 1 2 they are empty
  int n, candidate, to, from, move=0;//count  move number

  cout << "How many rings to move: ";
  cin >> n;
//intitialize the 3 towers 0 1 2
  for ( int i = n + 1; i >= 1; i-- )
     t[0].push_back(i);//add i to t[0] in the end, but t[0]is empty so t[0]=n+1
  t[1].push_back(n+1);
  t[2].push_back(n+2);
//intitialize  candidate and tower
    from = 0; 
    if( n % 2 == 1 )
       to = 1;                  //odd number
    else
       to = 2;                  //even number
    candidate = 1;

//ASCII 65 = A
// there are still rings to transfer to tower B = t[1]
  while( t[1].size() < n+1 ) {
      cout << "move number " << ++move << ":Move ring " << candidate
              << " from tower " << char(from + 65 ) << " to tower "//if from = 0 which means char(65)=A
              << char(to + 65) << endl;
      if ( n % 2 == 1 ) {    //odd number of the rings
        t[to].push_back(t[from].back() );   //place ring in to
        t[from].pop_back(); //remove ring from from tower and size decresed by 1

        if ( t[(to+1)%3].back() < t[(to+2)%3].back() )
           from = (to+1)%3;
        else
           from = (to+2)%3;

        if ( t[from].back() < t[(from+1)%3].back() )
           to = (from + 1 ) %3;
        else
           to = (from + 2 )%3;
        candidate = t[from].back();//get next candidate
      }
      else//even number
      {
        t[to].push_back(t[from].back() );
        t[from].pop_back();//

        if ( t[(to+2)%3].back() < t[(to+1)%3].back() )
           from = (to+2)%3;
        else
           from = (to+1)%3;
        
        if ( t[from].back() < t[(from+2)%3].back() )
           to = (from + 2 ) %3;
        else
           to = (from + 1 )%3;
      }     
      //get next candidate
      candidate = t[from].back();
   }
}
